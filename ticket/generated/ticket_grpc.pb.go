// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.0--rc1
// source: ticket.proto

package generated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TrainTicketing_CreateSection_FullMethodName      = "/train_ticketing.TrainTicketing/CreateSection"
	TrainTicketing_ViewSections_FullMethodName       = "/train_ticketing.TrainTicketing/ViewSections"
	TrainTicketing_ModifySections_FullMethodName     = "/train_ticketing.TrainTicketing/ModifySections"
	TrainTicketing_CreateUser_FullMethodName         = "/train_ticketing.TrainTicketing/CreateUser"
	TrainTicketing_GetUsers_FullMethodName           = "/train_ticketing.TrainTicketing/GetUsers"
	TrainTicketing_ModifyUser_FullMethodName         = "/train_ticketing.TrainTicketing/ModifyUser"
	TrainTicketing_RemoveUser_FullMethodName         = "/train_ticketing.TrainTicketing/RemoveUser"
	TrainTicketing_PurchaseTicket_FullMethodName     = "/train_ticketing.TrainTicketing/PurchaseTicket"
	TrainTicketing_ViewReceipt_FullMethodName        = "/train_ticketing.TrainTicketing/ViewReceipt"
	TrainTicketing_ViewSeatsBySection_FullMethodName = "/train_ticketing.TrainTicketing/ViewSeatsBySection"
	TrainTicketing_CancelReceipt_FullMethodName      = "/train_ticketing.TrainTicketing/CancelReceipt"
	TrainTicketing_ModifySeat_FullMethodName         = "/train_ticketing.TrainTicketing/ModifySeat"
)

// TrainTicketingClient is the client API for TrainTicketing service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrainTicketingClient interface {
	CreateSection(ctx context.Context, in *CreateSectionRequest, opts ...grpc.CallOption) (*Section, error)
	ViewSections(ctx context.Context, in *SectionRequest, opts ...grpc.CallOption) (*AllSections, error)
	ModifySections(ctx context.Context, in *ModifySectionRequest, opts ...grpc.CallOption) (*Section, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*User, error)
	GetUsers(ctx context.Context, in *UseRequest, opts ...grpc.CallOption) (*AllUsers, error)
	ModifyUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	RemoveUser(ctx context.Context, in *UseRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	PurchaseTicket(ctx context.Context, in *TicketRequest, opts ...grpc.CallOption) (*Ticket, error)
	ViewReceipt(ctx context.Context, in *UseRequest, opts ...grpc.CallOption) (*Receipt, error)
	ViewSeatsBySection(ctx context.Context, in *SectionRequest, opts ...grpc.CallOption) (*SeatAllocation, error)
	CancelReceipt(ctx context.Context, in *UseRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	ModifySeat(ctx context.Context, in *ModifySeatRequest, opts ...grpc.CallOption) (*Ticket, error)
}

type trainTicketingClient struct {
	cc grpc.ClientConnInterface
}

func NewTrainTicketingClient(cc grpc.ClientConnInterface) TrainTicketingClient {
	return &trainTicketingClient{cc}
}

func (c *trainTicketingClient) CreateSection(ctx context.Context, in *CreateSectionRequest, opts ...grpc.CallOption) (*Section, error) {
	out := new(Section)
	err := c.cc.Invoke(ctx, TrainTicketing_CreateSection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainTicketingClient) ViewSections(ctx context.Context, in *SectionRequest, opts ...grpc.CallOption) (*AllSections, error) {
	out := new(AllSections)
	err := c.cc.Invoke(ctx, TrainTicketing_ViewSections_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainTicketingClient) ModifySections(ctx context.Context, in *ModifySectionRequest, opts ...grpc.CallOption) (*Section, error) {
	out := new(Section)
	err := c.cc.Invoke(ctx, TrainTicketing_ModifySections_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainTicketingClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, TrainTicketing_CreateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainTicketingClient) GetUsers(ctx context.Context, in *UseRequest, opts ...grpc.CallOption) (*AllUsers, error) {
	out := new(AllUsers)
	err := c.cc.Invoke(ctx, TrainTicketing_GetUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainTicketingClient) ModifyUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, TrainTicketing_ModifyUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainTicketingClient) RemoveUser(ctx context.Context, in *UseRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, TrainTicketing_RemoveUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainTicketingClient) PurchaseTicket(ctx context.Context, in *TicketRequest, opts ...grpc.CallOption) (*Ticket, error) {
	out := new(Ticket)
	err := c.cc.Invoke(ctx, TrainTicketing_PurchaseTicket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainTicketingClient) ViewReceipt(ctx context.Context, in *UseRequest, opts ...grpc.CallOption) (*Receipt, error) {
	out := new(Receipt)
	err := c.cc.Invoke(ctx, TrainTicketing_ViewReceipt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainTicketingClient) ViewSeatsBySection(ctx context.Context, in *SectionRequest, opts ...grpc.CallOption) (*SeatAllocation, error) {
	out := new(SeatAllocation)
	err := c.cc.Invoke(ctx, TrainTicketing_ViewSeatsBySection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainTicketingClient) CancelReceipt(ctx context.Context, in *UseRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, TrainTicketing_CancelReceipt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainTicketingClient) ModifySeat(ctx context.Context, in *ModifySeatRequest, opts ...grpc.CallOption) (*Ticket, error) {
	out := new(Ticket)
	err := c.cc.Invoke(ctx, TrainTicketing_ModifySeat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrainTicketingServer is the server API for TrainTicketing service.
// All implementations must embed UnimplementedTrainTicketingServer
// for forward compatibility
type TrainTicketingServer interface {
	CreateSection(context.Context, *CreateSectionRequest) (*Section, error)
	ViewSections(context.Context, *SectionRequest) (*AllSections, error)
	ModifySections(context.Context, *ModifySectionRequest) (*Section, error)
	CreateUser(context.Context, *CreateUserRequest) (*User, error)
	GetUsers(context.Context, *UseRequest) (*AllUsers, error)
	ModifyUser(context.Context, *User) (*User, error)
	RemoveUser(context.Context, *UseRequest) (*EmptyResponse, error)
	PurchaseTicket(context.Context, *TicketRequest) (*Ticket, error)
	ViewReceipt(context.Context, *UseRequest) (*Receipt, error)
	ViewSeatsBySection(context.Context, *SectionRequest) (*SeatAllocation, error)
	CancelReceipt(context.Context, *UseRequest) (*EmptyResponse, error)
	ModifySeat(context.Context, *ModifySeatRequest) (*Ticket, error)
	mustEmbedUnimplementedTrainTicketingServer()
}

// UnimplementedTrainTicketingServer must be embedded to have forward compatible implementations.
type UnimplementedTrainTicketingServer struct {
}

func (UnimplementedTrainTicketingServer) CreateSection(context.Context, *CreateSectionRequest) (*Section, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSection not implemented")
}
func (UnimplementedTrainTicketingServer) ViewSections(context.Context, *SectionRequest) (*AllSections, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewSections not implemented")
}
func (UnimplementedTrainTicketingServer) ModifySections(context.Context, *ModifySectionRequest) (*Section, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifySections not implemented")
}
func (UnimplementedTrainTicketingServer) CreateUser(context.Context, *CreateUserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedTrainTicketingServer) GetUsers(context.Context, *UseRequest) (*AllUsers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedTrainTicketingServer) ModifyUser(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyUser not implemented")
}
func (UnimplementedTrainTicketingServer) RemoveUser(context.Context, *UseRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUser not implemented")
}
func (UnimplementedTrainTicketingServer) PurchaseTicket(context.Context, *TicketRequest) (*Ticket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurchaseTicket not implemented")
}
func (UnimplementedTrainTicketingServer) ViewReceipt(context.Context, *UseRequest) (*Receipt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewReceipt not implemented")
}
func (UnimplementedTrainTicketingServer) ViewSeatsBySection(context.Context, *SectionRequest) (*SeatAllocation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewSeatsBySection not implemented")
}
func (UnimplementedTrainTicketingServer) CancelReceipt(context.Context, *UseRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelReceipt not implemented")
}
func (UnimplementedTrainTicketingServer) ModifySeat(context.Context, *ModifySeatRequest) (*Ticket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifySeat not implemented")
}
func (UnimplementedTrainTicketingServer) mustEmbedUnimplementedTrainTicketingServer() {}

// UnsafeTrainTicketingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrainTicketingServer will
// result in compilation errors.
type UnsafeTrainTicketingServer interface {
	mustEmbedUnimplementedTrainTicketingServer()
}

func RegisterTrainTicketingServer(s grpc.ServiceRegistrar, srv TrainTicketingServer) {
	s.RegisterService(&TrainTicketing_ServiceDesc, srv)
}

func _TrainTicketing_CreateSection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainTicketingServer).CreateSection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrainTicketing_CreateSection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainTicketingServer).CreateSection(ctx, req.(*CreateSectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainTicketing_ViewSections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainTicketingServer).ViewSections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrainTicketing_ViewSections_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainTicketingServer).ViewSections(ctx, req.(*SectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainTicketing_ModifySections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifySectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainTicketingServer).ModifySections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrainTicketing_ModifySections_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainTicketingServer).ModifySections(ctx, req.(*ModifySectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainTicketing_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainTicketingServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrainTicketing_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainTicketingServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainTicketing_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainTicketingServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrainTicketing_GetUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainTicketingServer).GetUsers(ctx, req.(*UseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainTicketing_ModifyUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainTicketingServer).ModifyUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrainTicketing_ModifyUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainTicketingServer).ModifyUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainTicketing_RemoveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainTicketingServer).RemoveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrainTicketing_RemoveUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainTicketingServer).RemoveUser(ctx, req.(*UseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainTicketing_PurchaseTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainTicketingServer).PurchaseTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrainTicketing_PurchaseTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainTicketingServer).PurchaseTicket(ctx, req.(*TicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainTicketing_ViewReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainTicketingServer).ViewReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrainTicketing_ViewReceipt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainTicketingServer).ViewReceipt(ctx, req.(*UseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainTicketing_ViewSeatsBySection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainTicketingServer).ViewSeatsBySection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrainTicketing_ViewSeatsBySection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainTicketingServer).ViewSeatsBySection(ctx, req.(*SectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainTicketing_CancelReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainTicketingServer).CancelReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrainTicketing_CancelReceipt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainTicketingServer).CancelReceipt(ctx, req.(*UseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainTicketing_ModifySeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifySeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainTicketingServer).ModifySeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrainTicketing_ModifySeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainTicketingServer).ModifySeat(ctx, req.(*ModifySeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TrainTicketing_ServiceDesc is the grpc.ServiceDesc for TrainTicketing service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TrainTicketing_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "train_ticketing.TrainTicketing",
	HandlerType: (*TrainTicketingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSection",
			Handler:    _TrainTicketing_CreateSection_Handler,
		},
		{
			MethodName: "ViewSections",
			Handler:    _TrainTicketing_ViewSections_Handler,
		},
		{
			MethodName: "ModifySections",
			Handler:    _TrainTicketing_ModifySections_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _TrainTicketing_CreateUser_Handler,
		},
		{
			MethodName: "GetUsers",
			Handler:    _TrainTicketing_GetUsers_Handler,
		},
		{
			MethodName: "ModifyUser",
			Handler:    _TrainTicketing_ModifyUser_Handler,
		},
		{
			MethodName: "RemoveUser",
			Handler:    _TrainTicketing_RemoveUser_Handler,
		},
		{
			MethodName: "PurchaseTicket",
			Handler:    _TrainTicketing_PurchaseTicket_Handler,
		},
		{
			MethodName: "ViewReceipt",
			Handler:    _TrainTicketing_ViewReceipt_Handler,
		},
		{
			MethodName: "ViewSeatsBySection",
			Handler:    _TrainTicketing_ViewSeatsBySection_Handler,
		},
		{
			MethodName: "CancelReceipt",
			Handler:    _TrainTicketing_CancelReceipt_Handler,
		},
		{
			MethodName: "ModifySeat",
			Handler:    _TrainTicketing_ModifySeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ticket.proto",
}
